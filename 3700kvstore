#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os

BROADCAST = "FFFF"

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        print("Sending message '%s'" % (message,), flush=True)
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    # get corresponding fail message for a request
    def get_fail_message(self, msg):
        return {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'fail', 'MID': msg['MID'] }

    # handle put request and return corresponding response for put request
    def handle_put_request_and_obtain_response(self, msg):
        return self.get_fail_message(msg)

    # handle get request and return corresponding response for get request
    def handle_get_request_and_obtain_response(self, msg):
        return self.get_fail_message(msg)

    # delegate request to corresponding function
    def handle_request(self, msg):
        if msg['type'] == 'put':
            resp = self.handle_put_request_and_obtain_response(msg)
        elif msg['type'] == 'get':
            resp = self.handle_get_request_and_obtain_response(msg)

        self.send(resp)

    def run(self):
        while True:
            socks = select.select([self.socket], [], [], 0.1)[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)
                msg = json.loads(data.decode('utf-8'))
                print("Received message '%s'" % (msg,), flush=True)

                self.handle_request(msg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
